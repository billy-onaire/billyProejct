<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	
   <resultMap id="resultMember" type="Member">
      <id property="user_id" column="user_id" />
      <result property="user_pwd" column="user_pwd" />
      <result property="user_mobile" column="user_mobile" />
      <result property="user_name" column="user_name" />
      <result property="email" column="email" />
      <result property="authkey" column="authkey"/>
      <result property="verify" column="verify" />
      <result property="address" column="address" />
      <result property="my_introduce" column="my_introduce" />
      <result property="location_area" column="location_area" />
      <result property="user_enroll" column="user_enroll" />
      <result property="user_update" column="user_update" />
      <result property="report_count" column="report_count" />
      <result property="delete_yn" column="delete_yn" />
      <result property="total_count" column="total_count" />
   </resultMap>
   
   <!-- sms용 -->
   <resultMap id="resultSms" type="Sms">
   		<result property="user_id" column="user_id"/>
   		<result property="authno" column="authno"/>
   </resultMap>
   
   <sql id="userInfo">
      #{user_mobile}, #{user_name}, #{email}, #{authkey}, 'y', #{address}, #{my_introduce}, #{location_area},
      #{user_enroll}, sysdate, default, default, default 
   </sql>
   
   <!-- 탈퇴된 회원 유무체크 -->
   <select id="selectDeleteUser" parameterType="String" resultType="String">
   		select user_id from tb_user where user_id = #{userId} and delete_yn = 'Y'
   </select>
   
   <select id="selectCheckId" parameterType="String" resultMap="resultMember">
      select * from tb_user where user_id = #{userId}
   </select>
   
   <select id="selectLogin" parameterType="String" resultMap="resultMember">
      select * from tb_user where user_id = #{user_id}
   </select>

   <select id="selectList" resultMap="resultMember">
      select * from tb_user where user_name = #{user_name} and phone = #{phone}
   </select>	
   
   <!-- 아이디 중복확인 -->
   <select id="selectIdCheck" parameterType="string" resultMap="resultMember">
      select user_id from tb_user left join socialuser using (user_id) where user_id = #{user_id}
   </select>
   
   <select id="selectCheckANo" parameterType="String" resultType="String">
   		select authno from tb_sms where user_id = #{userId} 		
   </select>
   
   <select id="selectFindId" parameterType="Member" resultType="String">
   	  select user_id from tb_user where user_name = #{user_name} and user_mobile = #{user_mobile} 
   </select>
   
   <select id="selectMember" parameterType="Member" resultMap="resultMember" useCache="true">
      select * from tb_user where authkey not in (select social_code from socialuser) 
      and user_mobile = #{user_mobile} and user_name = #{user_name}     
   </select>
   
   <select id="selectSocialMember" parameterType="Member" resultMap="resultMember" useCache="true">
      select * from tb_user where authkey in (select social_code from socialuser) and user_id = #{user_id}    
   </select>	
   
   <!-- 회원관리 총 게시물수 체크 -->
   <select id="selectTotalCount" resultType="int">
   		select count(user_id)
   		from tb_user
   		where verify = 'y'
   </select>
   
   <!-- 회원관리 검색 총 게시물수 체크 -->
   <select id="selectSearchTotalCount" parameterType="map" resultType="int">
   		select count(user_id)
   		from tb_user
   		where verify = 'y' 
			<if test='search == null'>
				and ${select} = 'Y'
			</if>
			<if test='search != null'> 
				and ${select} like '%' || #{search} || '%'
			</if>
   </select>
   
   <!-- 회원관리 리스트 조회 -->
   <select id="selectMemberList" parameterType="org.kh.billy.member.model.vo.BasePage" resultMap="resultMember">
   		<![CDATA[
   		select user_id, user_pwd, user_mobile, user_name, email, authkey, 
		verify, address, my_introduce, location_area, user_enroll, user_update, report_count, delete_yn, total_count
		from (select rownum rnum, user_id, user_pwd, user_mobile, user_name, email, authkey, 
		verify, address, my_introduce, location_area, user_enroll, user_update, report_count, delete_yn, total_count
		from tb_user
		where verify = 'y'
		order by user_enroll desc, user_name desc)
		where rnum >= #{rowStart} and rnum <= #{rowEnd}
		]]>
   </select>
   
   <!-- 회원관리 검색 리스트 조회 -->
   <select id="selectSearchMemberList" parameterType="map" resultMap="resultMember">
   		select user_id, user_pwd, user_mobile, user_name, email, authkey, 
		verify, address, my_introduce, location_area, user_enroll, user_update, report_count, delete_yn, total_count
		from (select rownum rnum, user_id, user_pwd, user_mobile, user_name, email, authkey, 
		verify, address, my_introduce, location_area, user_enroll, user_update, report_count, delete_yn, total_count
		from tb_user
		where verify = 'y'
		<if test='search == null'>
			and ${select} = 'Y'
		</if>
		<if test='search != null'> 
			and ${select} like '%' || #{search} || '%'
		</if>
		<![CDATA[
		order by user_enroll desc, user_name desc)
		where rnum >= #{rowStart} and rnum <= #{rowEnd}
		]]>
   </select>
   
   <insert id = "insertMember" parameterType="Member">
	  insert into tb_user values(#{user_id}, #{user_pwd}, 
	  #{user_mobile}, #{user_name}, #{email}, #{authkey}, 'y', #{address}, 
	  #{my_introduce}, #{location_area}, sysdate, sysdate, default, default, default)
   </insert>
   
   <insert id = "insertSmember" parameterType="Member">
	  insert into tb_user values(#{user_id}, #{user_pwd}, 
	  #{user_mobile}, #{user_name}, #{email}, ${authkey}, 'y', #{address}, 
	  #{my_introduce}, #{location_area}, sysdate, sysdate, default, default, default)
   </insert>
  
   <insert id="insertSms" parameterType="Sms">
		insert into tb_sms values (#{user_id}, #{authno})   
   </insert>
     
   <update id="updateMember" parameterType="Member" >
      update tb_user 
      set user_pwd = #{user_pwd}, 
      user_mobile = #{user_mobile}, user_name = #{user_name}, 
      email = #{email}, address = #{address}, my_introduce = #{my_introduce}, 
      location_area = #{location_area}, user_update = sysdate where user_id = #{user_id}
   </update>
   
   <update id="updateVerify" parameterType="Member" >
      update tb_user set verify = #{verify} where user_id = #{user_id}
   </update>
   
   <update id="updateMemberPwd" parameterType="Member">
   		update tb_user set user_pwd = #{user_pwd} where user_id = #{user_id}
   </update>
   
   <update id="updateBackMember" parameterType="String">
   		update tb_user set delete_yn = 'N' where user_id = #{user_id}
   </update>
   
   <update id="updateSocialMember" parameterType="Member" >
      update tb_user 
      set user_mobile = #{user_mobile}, user_name = #{user_name}, 
      email = #{email}, address = #{address}, my_introduce = #{my_introduce}, 
      location_area = #{location_area}, user_update = sysdate where user_id = #{user_id}
   </update>
   
   <!-- 자진탈퇴 -->
   <update id="deleteUser" parameterType="string">
   		update tb_user set delete_yn = 'Y', verify = 'n' where user_id = #{userId}
   </update>
   
   <!-- 신고횟수가 3회이면 우선 탈퇴시킴 delete_yn => Y로 바꿈 (정지) -->
   <delete id="deleteMember" parameterType="string" >
      update tb_user set delete_yn = 'Y' where user_id = #{user_id}
   </delete>
   
   <delete id="deleteSuser" parameterType="string">
   	  delete socialuser where user_id = #{userId} 
   </delete>
   
   
   <delete id="deleteAutoNo" parameterType="String">
     delete from tb_sms where user_id = #{userId}
   </delete>
   
   

</mapper>