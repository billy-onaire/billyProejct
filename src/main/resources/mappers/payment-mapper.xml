<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="paymentMapper">

	<resultMap id="resultPayment" type="Payment">
		<id property="payment_no" column="payment_no" />
		<result property="payment_price" column="payment_price" />
		<result property="payment_quantity" column="payment_quantity" />
		<result property="payment_begindate" column="payment_begindate" />
		<result property="payment_enddate" column="payment_enddate" />
		<result property="status" column="status" />
		<result property="product_no" column="product_no" />
		<result property="customer" column="customer" />
		<result property="review_status" column="review_status" />
	</resultMap>
	<!-- SQ_PAYNO.nextval -->
	<insert id="insertBookingList" parameterType="payment">
		insert into payment values
		(SQ_PAYNO.nextval, #{ payment_price }, #{ payment_quantity }, #{ payment_begindate }, #{ payment_enddate }, 
		 '3', 20,
		 
		 	(select user_id
			 from tb_user
			 where user_id = #{ customer }),
			 
		 default)
	</insert>
	
	<select id="selectPaymentNo" parameterType="_int" resultType="string">
		select payment_no
		from payment
		where payment_no = #{ payment_no }
	</select>
	
	<select id="selectBookingUser" parameterType="payment" resultMap="resultPayment">
		select payment_no, product_name, seller_id, customer, payment_price
		from payment p, product r
		where p.product_no = r.product_no and customer = #{ customer } and rownum = 1
		order by payment_no desc
	</select>
	
	<update id="updateBookingUser" parameterType="payment">
		update
		(
			select * from payment
			where customer = #{ customer } and payment_no = #{ payment_no }
		)
		set
			payment_price = #{ payment_price }, payment_quantity = #{ payment_quantity },
			payment_begindate = #{ payment_begindate }, payment_enddate = #{ payment_enddate }
	</update>
	<!-- select booking_no, pd.seller_id, py.product_title, status
		from payment py
		join product pd using (product_no)
		where status in (1,2) and py.seller_id = pd.seller_id and seller_id = #{ userId } -->
	<select id="listCriteria" resultMap="resultPayment">
	<![CDATA[
		select o.rm, o.payment_price, o.status, o.product_name, o.seller_id, o.customer, o.payment_no
		from
		(
			select rownum as rm, i.payment_price, i.status, i.product_name, i.seller_id, i.customer, i.payment_no
			from
			(
				select payment_price, status, product_name, seller_id, customer, payment_no
				from payment p, product r
                where p.product_no = r.product_no
                order by payment_no desc
			) i
			where rownum <= (#{ perPageNum } * #{page}) and status in (1,2)
		) o
		where o.rm > #{ pageStart }
		]]>
			<include refid="search"/>
		<![CDATA[
	]]>
	</select>
	
	<select id="listWaitingCriteria" resultMap="resultPayment">
	<![CDATA[
		select o.rm, o.payment_price, o.status, o.product_name, o.seller_id, o.customer, o.payment_no
		from
		(
			select rownum as rm, i.payment_price, i.status, i.product_name, i.seller_id, i.customer, i.payment_no
			from
			(
				select payment_price, status, product_name, seller_id, customer, payment_no
				from payment p, product r
                where p.product_no = r.product_no
                order by payment_no desc
			) i
			where rownum <= (#{ perPageNum } * #{ page }) and status = 3
		) o
		where o.rm > #{ pageStart }
		]]>
			<include refid="searchSeller"/>
		<![CDATA[
	]]>
	
	</select>
	
	<select id="searchListCount" resultType="_int">
		select count(*) 
		from payment
		where status in (1,2)
		<include refid="search"/>
	</select>
	
	<select id="searchWaitingListCount" resultType="_int">
		select count(*)
		from payment
		where status = 3
	</select>
	
	<select id="selectPaymentListOne" parameterType="payment" resultType="payment">
		select payment_no, product_name, seller_id, customer, payment_price
		from payment p, product r
		where p.product_no = r.product_no and payment_no = #{ payment_no } and customer = #{ customer }
	</select>
	
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == '1'.toString">
				and status = #{ keyword } 
			</if>
			<if test="searchType == '2'.toString">
				and status = #{ keyword }
			</if>
			<if test="searchType == '3'.toString">
				and status = #{ keyword }
			</if>
			<if test="searchType == '4'.toString">
				and status = #{ keyword }
			</if>
		</if>
	</sql>
	
	<sql id="searchSeller">
		<if test="searchType != null">
			and o.seller_id like #{ keyword } 
		</if>
	</sql>
	<!-- <insert id="insertMember" parameterType="Member" useGeneratedKeys="true">
		insert into member values (#{userid},#{userpwd},#{username},#{gender},#{age},
								   #{phone},#{email},#{hobby},#{etc},sysdate,sysdate)
	</insert>
	<update id="updateMember" parameterType="Member">
		update member set userpwd = #{userpwd}, age = #{age}, email = #{email}, phone = #{phone}, etc = #{etc}, hobby = #{hobby}
		where userid = #{userid}
	</update>
	<delete id="deleteMember" parameterType="string">
		delete from member where userid = #{userid} 
	</delete>
	<select id="selectCheckId" parameterType="string" resultType="_int" useCache="true">
		select count(userid) from member where userid = #{userid}
	</select>
	<select id="selectMember" parameterType="string" resultType="Member" useCache="true">
		select * from member where userid = #{userid}
	</select>
	<select id="selectList" resultMap="resultMember" useCache="true">
		select * from member
	</select> -->

</mapper>
